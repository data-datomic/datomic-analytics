;; Copyright (c) Cognitect, Inc. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(require
 '[clojure.data.csv :as csv]
 '[clojure.edn :as edn]
 '[clojure.java.io :as io]
 '[datomic.client.api :as d])

;; data from http://fastml.com/goodbooks-10k
;; clone git@github.com:zygmuntz/goodbooks-10k.git
(def repo-dir "../goodbooks-10k")

(def client-cfg (read-string (slurp "config.edn")))

(set! *print-length* 10)

@(def columns
   (with-open [f (io/reader (io/file repo-dir "books.csv"))]
     (first (csv/read-csv f))))

@(def example
   (with-open [f (io/reader (io/file repo-dir "books.csv"))]
     (second (csv/read-csv f))))

(defn starts-with-digit?
  [s]
  (boolean (re-find #"^\d" s)))

;; necessary because CSV is not self-describing
;; this propagates some oddities in the source data (e.g. year as double)
(defn guess-schema-type
  [col v]
  (if (#{"isbn" "isbn13"} col)
    :db.type/string
    (if (starts-with-digit? v)
      (if (int? (edn/read-string v))
        :db.type/long
        :db.type/double)
      :db.type/string)))

@(def schema
   (mapv
    (fn [col example]
      {:db/ident (keyword "book" col)
       :db/cardinality :db.cardinality/one
       :db/valueType (guess-schema-type col example)})
    columns
    example))

(def client (d/client client-cfg))

(d/create-database client {:db-name "goodreads-10k"})

(def conn (d/connect client {:db-name "goodreads-10k"}))

(d/transact conn {:tx-data schema})

(defn row->entity
  [row schema]
  (into
   {}
   (remove (fn [[a v]] (nil? v))) ;; input data has some missing columns
   (mapv
    (fn [data schema]
      [(:db/ident schema) (if (= :db.type/string (:db/valueType schema))
                            data
                            (edn/read-string data))])
    row
    schema)))

@(def book-entities
   (with-open [f (io/reader (io/file repo-dir "books.csv"))]
     (let [rows (drop 1 (csv/read-csv f))]
       (mapv #(row->entity % schema) rows))))

;; this takes several seconds
(d/transact conn {:tx-data book-entities})

(d/list-databases client {})

;; peek at the books data
(def db (d/db conn))

(time
 (d/q '[:find ?title ?rating
        :where
        [?book :book/title ?title]
        [?book :book/average_rating ?rating]
        [(<= 4.8 ?rating)]]
      db))

(d/transact conn {:tx-data [{:db/ident :book/book_id
                             :db/unique :db.unique/identity}]})


@(def rating-columns
   (with-open [f (io/reader (io/file repo-dir "ratings.csv"))]
     (first (csv/read-csv f))))

@(def rating-example
   (with-open [f (io/reader (io/file repo-dir "ratings.csv"))]
     (second (csv/read-csv f))))

(d/transact conn {:tx-data [{:db/ident :rating/book
                             :db/cardinality :db.cardinality/one
                             :db/valueType :db.type/ref}
                            {:db/ident :rating/user_id
                             :db/cardinality :db.cardinality/one
                             :db/valueType :db.type/long}
                            {:db/ident :rating/book+user_id
                             :db/cardinality :db.cardinality/one
                             :db/unique :db.unique/identity
                             :db/valueType :db.type/tuple
                             :db/tupleAttrs [:rating/book :rating/user_id]}
                            {:db/ident :rating/rating
                             :db/cardinality :db.cardinality/one
                             :db/valueType :db.type/long}]})

(defn row->rating
  [[user_id book_id rating]]
  {:rating/book [:book/book_id (edn/read-string book_id)]
   :rating/user_id (edn/read-string user_id)
   :rating/rating (edn/read-string rating)})

(row->rating rating-example)

(time
 @(def rating-count
    (with-open [f (io/reader (io/file repo-dir "ratings.csv"))]
      (count (csv/read-csv f)))))

(def result
  (future
   (with-open [f (io/reader (io/file repo-dir "ratings.csv"))]
     (let [rows (drop 1 (csv/read-csv f))]
       (doseq [rows (partition-all 10000 rows)]
         (print ".") (flush)
         ;; if you want to be nice to other users on a shared system
         (Thread/sleep 2000)
         (d/transact conn {:tx-data (map row->rating rows)}))))))
