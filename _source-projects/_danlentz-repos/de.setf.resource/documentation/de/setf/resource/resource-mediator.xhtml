<?xml version='1.0' standalone='no' ?><!DOCTYPE xhtml PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns='http://www.w3.org/1999/xhtml'>  <head>   <meta name='date' content='20100625T034721' />       <meta http-equiv='Content-Type' content='text/xhtml;charset=iso-8859-1' />       <link href='../../../documentation.css' rel='stylesheet' type='text/css' />       <title>FILE: resource-mediator    </title>   </head><body><div class='file'><div class='type'>File</div><div class='name'>resource-mediator.lisp</div><hr /><div class='indexHeading'><span><a href='#index_E'>E</a> </span><span><a href='#index_F'>F</a> </span><span><a href='#index_I'>I</a> </span><span><a href='#index_L'>L</a> </span><span><a href='#index_P'>P</a> </span><span><a href='#index_R'>R</a> </span><span><a href='#index_S'>S</a> </span><span><a href='#index_U'>U</a> </span></div><hr /><div class='documentation'>This file defines the repository interface in terms of the abstract resource-mediator class which provides defaults and required components for exchanging RDF statements with a <a href='utilities.xhtml#persistent' class='reference class'>persistent</a> repository for the `de.setf.resource` CLOS linked data library.</div><div class='documentation'><div class='name'><a href='#store-value' style='margin-right: 0.5em'>store-value </a></div></div><div class='documentation'><div class='name'><a href='#model-value' style='margin-right: 0.5em'>model-value </a></div></div><div class='documentation'>The store-value and model-value functions map between the literal and resource domains in the respective rdf store and the clos data model. Each is defined in terms of two parameters, the store mediator and the data <a href='interface.xhtml#object' class='reference function'>object</a>. The resource identifier path relates the values in the data model, which concerns resource instances and their designators, which are represented as symbols or various uri objects, with those of the respective store, each of which has its own uri representation. The literal path concerns lisp data objects - numbers and strings, which are represented in each store as objects which wrap strings to combine them with type information. The operators construct/deconstruct instances as required and chace the relation in an identity map. For resources the map is two-way, while for literals just the data-to-rdf mapping implements an 'equal' identity.</div><div class='documentation'><div class='name'><a href='#ensure-vocabulary' style='margin-right: 0.5em'>ensure-vocabulary </a></div></div><div class='documentation'><div class='name'><a href='#find-vocabulary' style='margin-right: 0.5em'>find-vocabulary </a></div></div><div class='documentation'><div class='name'><a href='#load-vocabulary' style='margin-right: 0.5em'>load-vocabulary </a></div></div><div class='documentation'>Support RDF schema by translating them into CLOS. Integrate them into the respective repository mediator to govern term mapping and to provide class definitions. Mediate the definition process through the repository's store in order to mitigate variations, inconsistencies, and general insufficiency in RDF schema documents. This leaves just the variations between RDFS and OWL schema models. This approach delegates all responsibility for schema discovery to the storage infrastructure, which is expedient, but admittedly does little to advance issues raised by valkenburg[1]. This mechanism serves two purposes - During development, one can extract the definitions, augment the terms and/or types, and save them as   Lisp source code for static vocabulary declarations - packages, types, and classes respective one or   more RDF vocabularies. - At run-time, it generates ephemeral <a href='vocabulary.xhtml#vocabulary' class='reference class'>vocabulary</a> definitions on demand, as required to reconcile data to   existing data and procesing models.    The primary interface operations are - rdf:type-of : (identifier) given a resource identifier, return the type as cached or as asserted in the store. - rdf:find-class : (source identifier) given a class URI, locate or import the class definition. - rdf:load-vocabulary (source &amp;key uri) : retrieve the <a href='vocabulary.xhtml#vocabulary' class='reference class'>vocabulary</a> specification, parse it to   extract the namespace and the schema and save them in the namespace registry. succeeds only   with self-contained schema - those which are just properties of other schema yield just the   terms, but no classes. (eg. http://purl.org/net/vocab/2003/11/photo.rdf) --- [1] : http://www.ilrt.bris.ac.uk/discovery/rdf-dev/purls/papers/QL98-distributed/ </div><div class='documentation'><div class='name'><a href='#project-graph' style='margin-right: 0.5em'>project-graph </a></div></div><div class='documentation'><div class='name'><a href='#load-vocabulary' style='margin-right: 0.5em'>load-vocabulary </a></div></div><div class='documentation'>Extract the stw vocabulary after having loaded it into a store</div><hr /><div class='indexLetter'><a name='index_E'>E</a></div><div class='method' name='ensure-vocabulary' ID='ensure-vocabulary'><div class='type'>Method</div><div class='name'><a href='interface.xhtml#ensure-vocabulary'>ensure-vocabulary</a>   </div><div class='parameters'> (source resource-mediator) (uri string) &amp;rest args</div><div class='documentation'></div></div><hr /><div class='indexLetter'><a name='index_F'>F</a></div><div class='method' name='(setf find-vocabulary)' ID='(setf find-vocabulary)'><div class='type'>Method</div><div class='name'><a href='../../../../../../../../#(setf find-vocabulary)'>(setf find-vocabulary)</a>   </div><div class='parameters'> (value null) (source resource-mediator) (uri string)</div><div class='documentation'></div></div><hr /><div class='indexLetter'><a name='index_I'>I</a></div><div class='method' name='initialize-instance' ID='initialize-instance'><div class='type'>Method</div><div class='name'>initialize-instance  :after </div><div class='parameters'> (instance resource-mediator) &amp;key vocabularies</div><div class='documentation'>Complete initialization by incorporating vocabularies</div></div><hr /><div class='indexLetter'><a name='index_L'>L</a></div><div class='method' name='load-repository' ID='load-repository'><div class='type'>Method</div><div class='name'><a href='interface.xhtml#load-repository'>load-repository</a>   </div><div class='parameters'> (repository resource-mediator) (location pathname)</div><div class='documentation'></div></div><hr /><div class='method' name='load-vocabulary' ID='load-vocabulary'><div class='type'>Method</div><div class='name'>load-vocabulary   </div><div class='parameters'> (source resource-mediator) (vocabulary vocabulary)</div><div class='documentation'></div></div><hr /><div class='indexLetter'><a name='index_P'>P</a></div><div class='method' name='project-graph' ID='project-graph'><div class='type'>Method</div><div class='name'><a href='interface.xhtml#project-graph'>project-graph</a>   </div><div class='parameters'> (enumerator function) (destination resource-mediator)</div><div class='documentation'></div></div><hr /><div class='indexLetter'><a name='index_R'>R</a></div><div class='method' name='register-value' ID='register-value'><div class='type'>Method</div><div class='name'>register-value   </div><div class='parameters'> (source resource-mediator) (model-value t) (store-value t)</div><div class='documentation'></div></div><hr /><div class='function'><a name='repository-class-definition'><div class='type'>Generic Function</div><div class='name'>repository-class-definition</div><div class='parameters'> repository  identifier </div></a><div class='documentation'>Given a REPOSITORY and a class IDENTIFIER, construct a class definition based on the store's assertions about the  class. Extract the supertypes based on {rdfs}subClassOf, slots based on {rdfs}domain, and documentation based on {rdf}comment. Assert the class name as the datatype.</div></div><hr /><div class='method' name='repository-clear-instance-cache' ID='repository-clear-instance-cache'><div class='type'>Method</div><div class='name'>repository-clear-instance-cache   </div><div class='parameters'> (source resource-mediator)</div><div class='documentation'></div></div><hr /><div class='function'><a name='repository-property-definition'><div class='type'>Generic Function</div><div class='name'>repository-property-definition</div><div class='parameters'> repository  identifier </div></a><div class='documentation'>Given a REPOSITORY and a predicate IDENTIFIER, construct a property definition based on the store's assertions about the  predicate.</div></div><hr /><div class='function'><a name='resource-mediator'><div class='type'>Generic Function</div><div class='name'>resource-mediator</div><div class='parameters'> object  &amp;rest  args </div></a><div class='documentation'></div></div><hr /><div class='class'><a name='resource-mediator'><div class='type'>Class</div><div class='name'>resource-mediator</div><div class='superclasses'>( standard-object )</div></a><div class='documentation'>A resource-mediator encapsulates a concrete triple store to provide a standard repository interface to that store's operators and state and mediates between resource instances and the store. Concrete specializations are defined as - wilbur-mediator : for wilbur[1] - agraph-mediator : for allegrograph[2] --- [1]: http://wilbur-rdf.sourceforge.net/ [2]: http://www.franz.com/allegrograph </div><div class='slots'><div class='slot'><div class='name'><a name='#store'>store</a></div>[t]<div class='documentation'>The repository store instance. Each concrete class entails its own specification form     and must provide a default value if no initialization argument is given.</div></div><div class='slot'><div class='name'><a name='#transaction-cache'>transaction-cache</a></div>[t]<div class='documentation'>Caches the instances created and/or <a href='utilities.xhtml#modified' class='reference class'>modified</a> during a transaction.</div></div><div class='slot'><div class='name'><a name='#instance-cache'>instance-cache</a></div>[t]<div class='documentation'>URI-keyed cache for the instances present in the source repository and read into the     application. Registers both transactiona and <a href='utilities.xhtml#non-transactional' class='reference class'>non-transactional</a> instances to support interned     instantiation. It needs to be weak, but that is not possible portably. An alternative would be weak     entries, in which case it could as well be a weak avl/b+tree.</div></div><div class='slot'><div class='name'><a name='#state'>state</a></div>[t]<div class='documentation'>Indicates the mediated transaction state.</div></div><div class='slot'><div class='name'><a name='#vocabularies'>vocabularies</a></div>[list]<div class='documentation'>A list of URI namestrings which designate the vocabularies known to the source.     The value is initialized from (subject . (query nil {rdf}:type {owl}:Ontology)) when the source is     connected and is updated whenever a vocabulary is loaded.</div></div><div class='slot'><div class='name'><a name='#identifier-function'>identifier-function</a></div>[t]<div class='documentation'>The canonicalization function for term names mapped between the storage and the model     representations according to the convention that model terms are symbols while storage terms     are strings.</div></div><div class='slot'><div class='name'><a name='#store2model-value-map'>store2model-value-map</a></div>[t]<div class='documentation'>Maps resource URI to program symbols. The URI representation depends on the repository.</div></div><div class='slot'><div class='name'><a name='#model2store-value-map'>model2store-value-map</a></div>[t]<div class='documentation'>Maps model identifiers to store value. The representation depends on the repository.</div></div></div></div><hr /><div class='method' name='respository-schema-types' ID='respository-schema-types'><div class='type'>Method</div><div class='name'>respository-schema-types   </div><div class='parameters'> (source resource-mediator) (uri t)</div><div class='documentation'></div></div><hr /><div class='indexLetter'><a name='index_S'>S</a></div><div class='method' name='store-value' ID='store-value'><div class='type'>Method</div><div class='name'><a href='interface.xhtml#store-value'>store-value</a>  :around </div><div class='parameters'> (source resource-mediator) (model-value t)</div><div class='documentation'>A default wrapper method first looks in the cache, and delegates to the repository-specific method if there is a miss. Iff the specialized result differs, cache the correspondence.</div></div><hr /><div class='indexLetter'><a name='index_U'>U</a></div><div class='method' name='uri-type' ID='uri-type'><div class='type'>Method</div><div class='name'>uri-type   </div><div class='parameters'> (source resource-mediator) (uri-list cons)</div><div class='documentation'></div></div><hr /></div><hr /><div class='footer'><div style='float: left;'><img src='http://www.digitool.com/img/mcl-made-1.gif' /></div><div style='float: right;'> Copyright 2010 setf.de</div></div></body></html>