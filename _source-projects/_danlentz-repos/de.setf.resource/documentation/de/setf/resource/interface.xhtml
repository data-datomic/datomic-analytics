<?xml version='1.0' standalone='no' ?><!DOCTYPE xhtml PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns='http://www.w3.org/1999/xhtml'>  <head>   <meta name='date' content='20100625T034721' />       <meta http-equiv='Content-Type' content='text/xhtml;charset=iso-8859-1' />       <link href='../../../documentation.css' rel='stylesheet' type='text/css' />       <title>FILE: interface    </title>   </head><body><div class='file'><div class='type'>File</div><div class='name'>interface.lisp</div><hr /><div class='indexHeading'><span><a href='#index_A'>A</a> </span><span><a href='#index_C'>C</a> </span><span><a href='#index_D'>D</a> </span><span><a href='#index_E'>E</a> </span><span><a href='#index_F'>F</a> </span><span><a href='#index_G'>G</a> </span><span><a href='#index_H'>H</a> </span><span><a href='#index_I'>I</a> </span><span><a href='#index_L'>L</a> </span><span><a href='#index_M'>M</a> </span><span><a href='#index_O'>O</a> </span><span><a href='#index_P'>P</a> </span><span><a href='#index_Q'>Q</a> </span><span><a href='#index_R'>R</a> </span><span><a href='#index_S'>S</a> </span><span><a href='#index_T'>T</a> </span><span><a href='#index_U'>U</a> </span><span><a href='#index_W'>W</a> </span></div><hr /><div class='documentation'>This file defines a the API for the `de.setf.resource` CLOS linked data library.</div><div class='documentation'>The interface operator names follow from the standard RDF terms. The structure intends to be consistent with the spira.rb precedents, with allowance for standard Lisp idioms. The central terms are - rdf:statement  : the combination of an rdf:subject, rdf:predicate, and rdf:object - rdf:subject : a resource in a statement - rdf:predicate : property relating subject and object in a statement - rdf:object : a resource in a statement See the rdf-schema[1] tr for background on the terms. Other resource models:  RAP[2] : goes only as far as addProperty, lispProperties  Jena[3] - the OWL-based model concerns just inference within and externalized from the rdf graph, but not with   reified classes --- [1] : http://www.w3.org/TR/rdf-schema/ [2] : http://www.seasr.org/wp-content/plugins/meandre/rdfapi-php/doc/tutorial/introductionToRAP.htm [3] : http://jena.sourceforge.net/how-to/model-factory.html </div><hr /><div class='indexLetter'><a name='index_A'>A</a></div><div class='function'><a name='add-statement'><div class='type'>Generic Function</div><div class='name'>add-statement</div><div class='parameters'> context  statement </div></a><div class='documentation'>Assert the statement in the given context. CONTEXT : (or store resource-object) STATEMENT : rdf:statement If the context is a store, add the statement as a triple. If the context is an object bind the predicated <a href='#object' class='reference function'>object</a> to the <a href='#subject' class='reference function'>subject</a>.</div></div><hr /><div class='indexLetter'><a name='index_C'>C</a></div><div class='function'><a name='class-not-found'><div class='type'>Generic Function</div><div class='name'>class-not-found</div><div class='parameters'> metaclass  type </div></a><div class='documentation'>Invoked from rdf:find-class when no metaclass instance comprises the statement. The base method signals an rdf:<a href='utilities.xhtml#class-not-found-error' class='reference function'>class-not-found-error</a>.</div></div><hr /><div class='function'><a name='clear-repository'><div class='type'>Generic Function</div><div class='name'>clear-repository</div><div class='parameters'> store </div></a><div class='documentation'>Remove all statements from the store.</div></div><hr /><div class='function'><a name='clear-store'><div class='type'>Generic Function</div><div class='name'>clear-store</div><div class='parameters'> store </div></a><div class='documentation'>Remove all statements from the store.</div></div><hr /><div class='function'><a name='commit'><div class='type'>Generic Function</div><div class='name'>commit</div><div class='parameters'> object </div></a><div class='documentation'>Given a new or modified persistent object, write content to the persistent store, and make the object hollow. This performs both of the phases which complete a transaction in order to prevent stale state.</div></div><hr /><div class='indexLetter'><a name='index_D'>D</a></div><div class='function'><a name='delete'><div class='type'>Generic Function</div><div class='name'>delete</div><div class='parameters'> object </div></a><div class='documentation'>Given a persistent object, delete all concrete statements which include it as subject. If the objects is hollow, it comprises its URI only. This is used to retrieve anew and delete all related assertions form the store. If the object has been read from the store, the related statements are cached in relation to the slots. These cached statements are deleted from the store.</div></div><hr /><div class='function'><a name='delete-statement'><div class='type'>Generic Function</div><div class='name'>delete-statement</div><div class='parameters'> context  statement </div></a><div class='documentation'>Delete the statement from the given CONTEXT. CONTEXT : (or store resource-object) STATEMENT : rdf:statement If the context is a store, remove the statement's triple. If the context is an object unbind the predicated property.</div></div><hr /><div class='function'><a name='delete-subject'><div class='type'>Generic Function</div><div class='name'>delete-subject</div><div class='parameters'> context  subject </div></a><div class='documentation'>Delete all statements relatd to this object from the given CONTEXT. CONTEXT : (or store resource-object) SUBJECT : identifier If the context is a store, remove all triples with that subject. If the context is an object remove it fron it's store's index.</div></div><hr /><div class='indexLetter'><a name='index_E'>E</a></div><div class='function'><a name='ensure-instance'><div class='type'>Generic Function</div><div class='name'>ensure-instance</div><div class='parameters'> context  identifier </div></a><div class='documentation'>Attempt to find the designated instance relative to the context. (cf find-instance). CONTEXT : (or <a href='resource-class.xhtml#resource-class' class='reference class'>resource-class</a> <a href='resource-mediator.xhtml#resource-mediator' class='reference class'>resource-mediator</a>) IDENTIFIER : identifier The identifier forms depend on the context. For a mediated context, any model representation is mapped to that of the respective store. If no instance exists create one.</div></div><hr /><div class='function'><a name='ensure-vocabulary'><div class='type'>Generic Function</div><div class='name'>ensure-vocabulary</div><div class='parameters'> source  uri </div></a><div class='documentation'>Iff the vocabulary is not integrated into the source mediator, load it from the source, incorporate its terms and register it as a handle on the class declarations.</div></div><hr /><div class='function'><a name='equal'><div class='type'>Generic Function</div><div class='name'>equal</div><div class='parameters'> object1  object2 </div></a><div class='documentation'>Return true iff the two objects denote the same resource or literal. Resource objects map to their respective URI, URI are compared as namestrings, and other domain-model objects with equal. Store-domain object are compared for identity or namestring and type equivalence.</div></div><hr /><div class='function'><a name='evict'><div class='type'>Generic Function</div><div class='name'>evict</div><div class='parameters'> object </div></a><div class='documentation'>Remove the object from a transaction's state and clear its content. Permitted in the clean-persistent state only.</div></div><hr /><div class='indexLetter'><a name='index_F'>F</a></div><div class='function'><a name='find-class'><div class='type'>Generic Function</div><div class='name'>find-class</div><div class='parameters'> context  type  &amp;key  error-p </div></a><div class='documentation'>Find the class designated by TYPE in the specifiec CONTEXT. CONTEXT : (or resource-class resource-mediator) TYPE : rdf:identifier If the context is a resource-class, look for an instance of its <a href='vocabulary.xhtml#vocabulary' class='reference class'>vocabulary</a> or delegate to its source. If the context is a <a href='resource-mediator.xhtml#resource-mediator' class='reference function'>resource-mediator</a>, seach the vocabularies. If none is found and error-p is true, apply the metaclass' class-not-found-function to it and the type. By default this signals a continuable class-not-found-error.</div></div><hr /><div class='function'><a name='find-instance'><div class='type'>Generic Function</div><div class='name'>find-instance</div><div class='parameters'> context  identifier </div></a><div class='documentation'>Find the designated instance relative to the class. If the designator is a string, interpret it as a resource identifier - either absolute or just the fragment. If it is an expression, treat it as a query against the class' default source.</div></div><hr /><div class='function'><a name='find-vocabulary'><div class='type'>Generic Function</div><div class='name'>find-vocabulary</div><div class='parameters'> source  uri </div></a><div class='documentation'>Attempt to locate a vocabulary given its base URI or that of a term. Return nil if none is found.</div></div><hr /><div class='indexLetter'><a name='index_G'>G</a></div><div class='function'><a name='graph'><div class='type'>Generic Function</div><div class='name'>graph</div><div class='parameters'> statement </div></a><div class='documentation'>Return the statement's graph. If the statement is a <a href='../../../../../../../../#triple' class='reference class'>triple</a>, return nil.</div></div><hr /><div class='indexLetter'><a name='index_H'>H</a></div><div class='function'><a name='has-object?'><div class='type'>Generic Function</div><div class='name'>has-object?</div><div class='parameters'> context  object </div></a><div class='documentation'>Return true of the context state includes an assertion with the object CONTEXT : store OBJECT : t</div></div><hr /><div class='function'><a name='has-predicate?'><div class='type'>Generic Function</div><div class='name'>has-predicate?</div><div class='parameters'> context  predicate </div></a><div class='documentation'>Return true of the context state includes an assertion with the predicate CONTEXT : (or <a href='resource-object.xhtml#resource-object' class='reference class'>resource-object</a> store) predicate : identifier</div></div><hr /><div class='function'><a name='has-statement?'><div class='type'>Generic Function</div><div class='name'>has-statement?</div><div class='parameters'> context  statement </div></a><div class='documentation'>Return true of the context state includes the assertion CONTEXT : (or <a href='resource-object.xhtml#resource-object' class='reference class'>resource-object</a> store) STATEMENT : statement</div></div><hr /><div class='function'><a name='has-subject?'><div class='type'>Generic Function</div><div class='name'>has-subject?</div><div class='parameters'> context  subject-identifier </div></a><div class='documentation'>Return true of the context state includes an assertion about the subject CONTEXT : (or <a href='resource-object.xhtml#resource-object' class='reference class'>resource-object</a> store) SUBJECT : identifier</div></div><hr /><div class='indexLetter'><a name='index_I'>I</a></div><div class='function'><a name='insert-statement'><div class='type'>Generic Function</div><div class='name'>insert-statement</div><div class='parameters'> context  statement </div></a><div class='documentation'>Assert the statement in the given context. CONTEXT : (or store resource-object) STATEMENT : rdf:statement If the context is a store, add the statement as a triple. If the context is an object bind the predicated <a href='#object' class='reference function'>object</a> to the <a href='#subject' class='reference function'>subject</a>.</div></div><hr /><div class='function'><a name='instance-not-found'><div class='type'>Generic Function</div><div class='name'>instance-not-found</div><div class='parameters'> class  identifier </div></a><div class='documentation'>Invoked from find-instance if the given uri does not designate an instance in the context of the class and/or its respective <a href='utilities.xhtml#persistent' class='reference class'>persistent</a> store.</div></div><hr /><div class='indexLetter'><a name='index_L'>L</a></div><div class='function'><a name='load-repository'><div class='type'>Generic Function</div><div class='name'>load-repository</div><div class='parameters'> store  location </div></a><div class='documentation'>Load a STORE from a give LOCATION. STORE : resource-mediator LOCATION : (or pathname uri stream) Reads RDF content from a location and adds the triples to the mediated data store.</div></div><hr /><div class='function'><a name='load-repository-as'><div class='type'>Generic Function</div><div class='name'>load-repository-as</div><div class='parameters'> store  location  form </div></a><div class='documentation'>Decode the content from the source LOCATION as FORM and load it into the repository store.</div></div><hr /><div class='function'><a name='load-store'><div class='type'>Generic Function</div><div class='name'>load-store</div><div class='parameters'> store  location </div></a><div class='documentation'>Load a STORE from a give LOCATION. STORE : resource-mediator LOCATION : (or pathname uri stream) Reads N3-encoded RDF content from a location and adds the triples to the mediated data store.</div></div><hr /><div class='indexLetter'><a name='index_M'>M</a></div><div class='function'><a name='make-persistent'><div class='type'>Generic Function</div><div class='name'>make-persistent</div><div class='parameters'> object </div></a><div class='documentation'>When applied to a transient object in a transaction, the object is registered to be stored when the transaction completes and the state is changed to mark it new-persistent, in which state it maintains a modification history.</div></div><hr /><div class='function'><a name='map-property-predicates'><div class='type'>Generic Function</div><div class='name'>map-property-predicates</div><div class='parameters'> function  subject </div></a><div class='documentation'>Map the function over the context's property slot predicates. FUNCTION : function : The function should accept one argument, the property predicate identifier. SUBJECT : <a href='resource-object.xhtml#resource-object' class='reference class'>resource-object</a> VALUES : t : the base method returns the subject instance The function should accept one argument, the predicate. For property classes implemented in terms of map-property-slots. For repositories, implemented in terms of the respective statement enumeration mechanism.</div></div><hr /><div class='function'><a name='map-property-slots'><div class='type'>Generic Function</div><div class='name'>map-property-slots</div><div class='parameters'> function  resource-object </div></a><div class='documentation'>Map the function over the subject's <a href='#predicate' class='reference function'>predicate</a> slot definitions. FUNCTION : function : The function should accept one argument, the property definition object. SUBJECT : <a href='resource-object.xhtml#resource-object' class='reference class'>resource-object</a> VALUES : t : the base method returns the subject instance</div></div><hr /><div class='function'><a name='map-property-values'><div class='type'>Generic Function</div><div class='name'>map-property-values</div><div class='parameters'> function  subject </div></a><div class='documentation'>Map the function over the subject's <a href='#predicate' class='reference function'>predicate</a> slots' values. FUNCTION : function: The function should accept one argument, the property value. SUBJECT : <a href='resource-object.xhtml#resource-object' class='reference class'>resource-object</a> VALUES : t : the base method returns the subject instance  The function is called with each individual _model-domain_ value in turn. Slots' sequence values are passed element-by-element. Unbound slots of a resource-object are skipped. Meathods are combined by progn and the default  method returns the context object. The base method defined for resource-object iterates over all prototypal properties and each resource-class definition generates a method for the respective direct slots.</div></div><hr /><div class='function'><a name='map-statements'><div class='type'>Generic Function</div><div class='name'>map-statements</div><div class='parameters'> function  source </div></a><div class='documentation'>This is a special projection case, in which the destination is a consumer function and the source applies that function to each statement it contains.</div></div><hr /><div class='function'><a name='model-value'><div class='type'>Generic Function</div><div class='name'>model-value</div><div class='parameters'> store  object </div></a><div class='documentation'>Map the given OBJECT from the STORE's domain to the model domain. Decode literal values according to their annotation and transform URI into uuid or symbols. Each source implements its own methods for literals and <a href='#uri' class='reference function'>URI</a> to operate on the respective representation. Return objects already in the model domain unchanged.</div></div><hr /><div class='indexLetter'><a name='index_O'>O</a></div><div class='function'><a name='object'><div class='type'>Generic Function</div><div class='name'>object</div><div class='parameters'> statement </div></a><div class='documentation'>Return the statement's object as a URI, a node, or a literal, as per the source store's representation.</div></div><hr /><div class='function'><a name='object-value'><div class='type'>Generic Function</div><div class='name'>object-value</div><div class='parameters'> source  statement </div></a><div class='documentation'>Return the statement's object as a URI or a literal in the model domain, as translated by the store mediator.</div></div><hr /><div class='indexLetter'><a name='index_P'>P</a></div><div class='function'><a name='predicate'><div class='type'>Generic Function</div><div class='name'>predicate</div><div class='parameters'> statement </div></a><div class='documentation'>Return the statement's predicate as a URI, a node, or a literal, as per the source store's representation.</div></div><hr /><div class='function'><a name='predicate-value'><div class='type'>Generic Function</div><div class='name'>predicate-value</div><div class='parameters'> store  statement </div></a><div class='documentation'>Return the statement's predicate as a URI or a literal in the model domain, as translated by the store mediator.</div></div><hr /><div class='function'><a name='project-graph'><div class='type'>Generic Function</div><div class='name'>project-graph</div><div class='parameters'> source  destination </div></a><div class='documentation'>Project a model/graph/store from a source onto a destination. SOURCE : (or stream list resource-object resource-mediator function) DESTINATION : (or stream list resource-object <a href='resource-mediator.xhtml#resource-mediator' class='reference function'>resource-mediator</a> function) The source can be in the form of a repository, a concrete statement extension, an enumerable extension, or a model instance. For a model which exists as a concrete instance of a statement extension, this projects the statement set, for example, by iterating the set and adding each statement to the destination. For a store, the extent is constrained by combining the store with a selection query. The destination can be specified as a single instance, in which case each applicable statement is applied to the instance in turn to the respective property slot, a class, in which case an instance extension results, based on those statements which pertain to instances of the class, or a meta-class, in which case an extension results based on the entire ontology comprised by the meta-class. Default methods are defined for stream, list, resource-object, and <a href='resource-mediator.xhtml#resource-mediator' class='reference function'>resource-mediator</a> to operate on the respective content.</div></div><hr /><div class='function'><a name='property-missing'><div class='type'>Generic Function</div><div class='name'>property-missing</div><div class='parameters'> class  object  statement  operation  &amp;optional  value </div></a><div class='documentation'>Invoked when an attempt is made to access a predicate property in object an object through one of the operations property-value, (setf property-value), property-boundp, property-exists-p, property-makunbound, get-statements, insert-statement, or remove-statement. The base method for the class <a href='resource-object.xhtml#resource-object' class='reference class'>resource-object</a> signals a <a href='utilities.xhtml#property-missing-error' class='reference class'>property-missing-error</a> with the object and statement, and provides the continuations ignore, which returns no values, and redefine, which redefines the class to include the property ans retries the operation, and use-value, which returns the value provided.</div></div><hr /><div class='function'><a name='property-read-only'><div class='type'>Generic Function</div><div class='name'>property-read-only</div><div class='parameters'> class  object  property-name  operation  value </div></a><div class='documentation'>Invoked when an attempt is made to modify a predicate property which is specified as read-only.</div></div><hr /><div class='indexLetter'><a name='index_Q'>Q</a></div><div class='function'><a name='query'><div class='type'>Generic Function</div><div class='name'>query</div><div class='parameters'> store  &amp;key  subject  predicate  object  graph  continuation  offset  limit </div></a><div class='documentation'>Perform a query against the STORE. Permit  SUBJECT PREDICATE OBJECT and GRAPH constraints. STORE : resource-mediator : the store mediator SUBJECT, PREDICATE, OBJECT, GRAPH : t : a value in the model domain CONTINUATION : (or function null) : an optional function of one argument, a statement in the store domain. VALUE : list : if no continuation is supplied, a list of the selected statement in the store domain. The given statement constituents are transformed from the model domain to the respective store's literal and resource domains and formulated as a query in the store's terms, whereby the NIL value denotes a wildcard. If a continuation is supplied it is applied in turn to each result statement. Otherwise statement list is returned. The possible constraints depend on the context. - When applied to a source/db the constraints can be   - an object : which delegates to its URI   - an URI, which is interpreted as the subject uri - When applied to an object the constraint can be   - an URI, which is interpreted as a predicate   - nil, which is a wildcard   - an object or a literal, which is interpreted as a constraint on the object. to do: pattern, sparql, and other query forms.</div></div><hr /><div class='indexLetter'><a name='index_R'>R</a></div><div class='function'><a name='read-properties'><div class='type'>Generic Function</div><div class='name'>read-properties</div><div class='parameters'> object </div></a><div class='documentation'>Given an hollow object, or a modified persistent object retrieve the first-order predicated properties and bind them as per the class definition. Absent properties remain unbound, while additional properties signal a continuable predicate-missing error. Arity is managed as per the slot definition. Should multiple values appear for an atomic slot, that causes a continuable error. If the object is <a href='utilities.xhtml#modified-persistent' class='reference class'>modified-persistent</a>, discard any modifications. Any other intiial state signals an error.</div></div><hr /><div class='function'><a name='repository-count'><div class='type'>Generic Function</div><div class='name'>repository-count</div><div class='parameters'> repository </div></a><div class='documentation'>Return the count of statements in the repository.</div></div><hr /><div class='function'><a name='repository-persistent?'><div class='type'>Generic Function</div><div class='name'>repository-persistent?</div><div class='parameters'> repository </div></a><div class='documentation'>Return true iff the repository store is <a href='utilities.xhtml#persistent' class='reference class'>persistent</a>. The inverse of repository-transient?. The default method returns nil and must be specialized for each concrete repository and/or repository class.</div></div><hr /><div class='function'><a name='repository-readable?'><div class='type'>Generic Function</div><div class='name'>repository-readable?</div><div class='parameters'> repository </div></a><div class='documentation'>Return true iff the repository support query operations. The default method returns t and must be specialized for each concrete repository and/or repository class.</div></div><hr /><div class='function'><a name='repository-transient?'><div class='type'>Generic Function</div><div class='name'>repository-transient?</div><div class='parameters'> repository </div></a><div class='documentation'>Return true iff the repository store is not <a href='utilities.xhtml#persistent' class='reference class'>persistent</a>. The inverse of repository-persistent?. The default method returns t and must be specialized for each concrete repository and/or repository class.</div></div><hr /><div class='function'><a name='repository-writable?'><div class='type'>Generic Function</div><div class='name'>repository-writable?</div><div class='parameters'> repository </div></a><div class='documentation'>Return true iff the repository support insert and delete operations. The default method returns nil and must be specialized for each concrete repository and/or repository class.</div></div><hr /><div class='indexLetter'><a name='index_S'>S</a></div><div class='function'><a name='save-repository'><div class='type'>Generic Function</div><div class='name'>save-repository</div><div class='parameters'> store  location </div></a><div class='documentation'>Load a STORE from a give LOCATION. STORE : resource-mediator LOCATION : (or pathname uri stream) Save the content of the mediated data store as N3-encoded RDF content to the given location.</div></div><hr /><div class='function'><a name='save-store'><div class='type'>Generic Function</div><div class='name'>save-store</div><div class='parameters'> store  location </div></a><div class='documentation'>Load a STORE from a give LOCATION. STORE : resource-mediator LOCATION : (or pathname uri stream) Save the content of the mediated data store as N3-encoded RDF content to the given location.</div></div><hr /><div class='function'><a name='store-value'><div class='type'>Generic Function</div><div class='name'>store-value</div><div class='parameters'> store  object </div></a><div class='documentation'>Map the given OBJECT from its representation in the model domain to its representation for a particular RDF data STORE. STORE : resource-mediator OBJECT : t : comprises literals (number, string) and resource-object instances or their symbol or  uri designators. Each resource mediator performs the transformation required by its respective source and maintains a cache as appropriate to effect whatever identity is required for queries. For example, wilbur's interning db class identifies literals and URI, which means the mediator must just ensure that resource objects are reduced to their URI designators and maintain identity in the URI-to-object direction.  Return objects already in the store's domain unchanged.</div></div><hr /><div class='function'><a name='subject'><div class='type'>Generic Function</div><div class='name'>subject</div><div class='parameters'> statement </div></a><div class='documentation'>Return the statement's subject as a URI, a node, or a literal, as per the source store's representation.</div></div><hr /><div class='function'><a name='subject-value'><div class='type'>Generic Function</div><div class='name'>subject-value</div><div class='parameters'> store  statement </div></a><div class='documentation'>Return the statement's subject as a URI or a literal in the model domain, as translated by the store mediator.</div></div><hr /><div class='indexLetter'><a name='index_T'>T</a></div><div class='function'><a name='type-of'><div class='type'>Generic Function</div><div class='name'>type-of</div><div class='parameters'> context  identifier </div></a><div class='documentation'>Determine the type of the designated resource. CONTEXT : (or store resource-object) IDENTIFIER : rdf:identifier  If the designated resource is already present in the model, return its instance type directly. Otherwise delegate to the store and retrieve its type as a model-domain identifier. Absent an assertion, presume the type {rdfs}Resource.</div></div><hr /><div class='indexLetter'><a name='index_U'>U</a></div><div class='function'><a name='unbind-property-slots'><div class='type'>Generic Function</div><div class='name'>unbind-property-slots</div><div class='parameters'> object </div></a><div class='documentation'>Unbind all property slots in the object.</div></div><hr /><div class='function'><a name='uri'><div class='type'>Generic Function</div><div class='name'>uri</div><div class='parameters'> object </div></a><div class='documentation'>Return the object's URI.</div></div><hr /><div class='indexLetter'><a name='index_W'>W</a></div><div class='function'><a name='write-properties'><div class='type'>Generic Function</div><div class='name'>write-properties</div><div class='parameters'> object </div></a><div class='documentation'>Given an object, project its current property state onto its store.</div></div><hr /></div><hr /><div class='footer'><div style='float: left;'><img src='http://www.digitool.com/img/mcl-made-1.gif' /></div><div style='float: right;'> Copyright 2010 setf.de</div></div></body></html>