;;;  -*- Package: thrift-generated -*-
;;;
;;; Autogenerated by Thrift
;;; DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

(in-package :thrift-generated)

(thrift:def-constant "COMPACT_TEST" (make-instance 'compactprototeststruct 
  :a_byte 127
  :a_i16 32000
  :a_i32 1000000000
  :a_i64 1099511627775
  :a_double 5.6789
  :a_string "my string"
  :true_field t
  :false_field nil
  :empty_struct_field (make-instance 'empty 
    )
  :byte_list (thrift:list
      -127
      -1
      0
      1
      127
      )
  :i16_list (thrift:list
      -1
      0
      1
      32767
      )
  :i32_list (thrift:list
      -1
      0
      255
      65535
      16777215
      2147483647
      )
  :i64_list (thrift:list
      -1
      0
      255
      65535
      16777215
      4294967295
      1099511627775
      281474976710655
      72057594037927935
      9223372036854775807
      )
  :double_list (thrift:list
      0.1
      0.2
      0.3
      )
  :string_list (thrift:list
      "first"
      "second"
      "third"
      )
  :boolean_list (thrift:list
      t
      t
      t
      nil
      nil
      nil
      )
  :struct_list (thrift:list
      (make-instance 'empty 
        )
      (make-instance 'empty 
        )
      )
  :byte_set (thrift:set
      -127
      -1
      0
      1
      127
      )
  :i16_set (thrift:set
      -1
      0
      1
      32767
      )
  :i32_set (thrift:set
      1
      2
      3
      )
  :i64_set (thrift:set
      -1
      0
      255
      65535
      16777215
      4294967295
      1099511627775
      281474976710655
      72057594037927935
      9223372036854775807
      )
  :double_set (thrift:set
      0.1
      0.2
      0.3
      )
  :string_set (thrift:set
      "first"
      "second"
      "third"
      )
  :boolean_set (thrift:set
      t
      nil
      )
  :struct_set (thrift:set
      (make-instance 'empty 
        )
      )
  :byte_byte_map (thrift:map 
    (cl:cons 1 2)  )
  :i16_byte_map (thrift:map 
    (cl:cons 1 1)
    (cl:cons -1 1)
    (cl:cons 32767 1)  )
  :i32_byte_map (thrift:map 
    (cl:cons 1 1)
    (cl:cons -1 1)
    (cl:cons 2147483647 1)  )
  :i64_byte_map (thrift:map 
    (cl:cons 0 1)
    (cl:cons 1 1)
    (cl:cons -1 1)
    (cl:cons 9223372036854775807 1)  )
  :double_byte_map (thrift:map 
    (cl:cons -1.1 1)
    (cl:cons 1.1 1)  )
  :string_byte_map (thrift:map 
    (cl:cons "first" 1)
    (cl:cons "second" 2)
    (cl:cons "third" 3)
    (cl:cons "" 0)  )
  :boolean_byte_map (thrift:map 
    (cl:cons t 1)
    (cl:cons nil 0)  )
  :byte_i16_map (thrift:map 
    (cl:cons 1 1)
    (cl:cons 2 -1)
    (cl:cons 3 32767)  )
  :byte_i32_map (thrift:map 
    (cl:cons 1 1)
    (cl:cons 2 -1)
    (cl:cons 3 2147483647)  )
  :byte_i64_map (thrift:map 
    (cl:cons 1 1)
    (cl:cons 2 -1)
    (cl:cons 3 9223372036854775807)  )
  :byte_double_map (thrift:map 
    (cl:cons 1 0.1)
    (cl:cons 2 -0.1)
    (cl:cons 3 1e+06)  )
  :byte_string_map (thrift:map 
    (cl:cons 1 "")
    (cl:cons 2 "blah")
    (cl:cons 3 "loooooooooooooong string")  )
  :byte_boolean_map (thrift:map 
    (cl:cons 1 t)
    (cl:cons 2 nil)  )
  :list_byte_map (thrift:map 
    (cl:cons (thrift:list
        1
        2
        3
        ) 1)
    (cl:cons (thrift:list
        0
        1
        ) 2)
    (cl:cons (thrift:list
        ) 0)  )
  :set_byte_map (thrift:map 
    (cl:cons (thrift:set
        1
        2
        3
        ) 1)
    (cl:cons (thrift:set
        0
        1
        ) 2)
    (cl:cons (thrift:set
        ) 0)  )
  :map_byte_map (thrift:map 
    (cl:cons (thrift:map 
      (cl:cons 1 1)    ) 1)
    (cl:cons (thrift:map 
      (cl:cons 2 2)    ) 2)
    (cl:cons (thrift:map     ) 0)  )
  :byte_map_map (thrift:map 
    (cl:cons 0 (thrift:map     ))
    (cl:cons 1 (thrift:map 
      (cl:cons 1 1)    ))
    (cl:cons 2 (thrift:map 
      (cl:cons 1 1)
      (cl:cons 2 2)    ))  )
  :byte_set_map (thrift:map 
    (cl:cons 0 (thrift:set
        ))
    (cl:cons 1 (thrift:set
        1
        ))
    (cl:cons 2 (thrift:set
        1
        2
        ))  )
  :byte_list_map (thrift:map 
    (cl:cons 0 (thrift:list
        ))
    (cl:cons 1 (thrift:list
        1
        ))
    (cl:cons 2 (thrift:list
        1
        2
        ))  )
  ))

(thrift:def-constant "MYCONST" 2)

(thrift:def-constant "MY_SOME_ENUM" 1)

(thrift:def-constant "MY_SOME_ENUM_1" 1)

(thrift:def-constant "MY_ENUM_MAP" (thrift:map 
  (cl:cons   1   2)))

(thrift:def-constant "EXTRA_CRAZY_MAP" (thrift:map 
  (cl:cons   1 (make-instance 'structwithsomeenum 
    :blah     2
    ))))

