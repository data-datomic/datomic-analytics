diff -Nur node-v14.0.0-orig/common.gypi node-v14.0.0/common.gypi
--- node-v14.0.0-orig/common.gypi	2020-04-21 13:38:48.000000000 +0200
+++ node-v14.0.0/common.gypi	2020-04-24 16:23:28.030759453 +0200
@@ -170,6 +170,19 @@
             'cflags': [ '-fno-omit-frame-pointer' ],
           }],
           ['OS=="linux"', {
+            'cflags!': [
+              '-O3',
+            ],
+            'cflags': [
+              '-Os',
+              '-ffunction-sections',
+              '-fdata-sections',
+            ],
+            'ldflags': [
+              '-fuse-ld=gold',
+              '-Wl,--icf=all',
+              '-Wl,--gc-sections',
+            ],
             'conditions': [
               ['enable_pgo_generate=="true"', {
                 'cflags': ['<(pgo_generate)'],
diff -Nur node-v14.0.0-orig/tools/v8_gypfiles/toolchain.gypi node-v14.0.0/tools/v8_gypfiles/toolchain.gypi
--- node-v14.0.0-orig/tools/v8_gypfiles/toolchain.gypi	2020-04-21 13:38:53.000000000 +0200
+++ node-v14.0.0/tools/v8_gypfiles/toolchain.gypi	2020-04-24 16:23:28.030759453 +0200
@@ -1278,23 +1278,14 @@
                 'cflags!': [
                   '-O0',
                   '-O1',
-                  '-Os',
+                  '-O2',
+                  '-O3',
                 ],
                 'cflags': [
+                  '-Os',
                   '-fdata-sections',
                   '-ffunction-sections',
                 ],
-                'conditions': [
-                  # Don't use -O3 with sanitizers.
-                  ['asan==0 and msan==0 and lsan==0 \
-                and tsan==0 and ubsan==0 and ubsan_vptr==0', {
-                    'cflags': ['-O3'],
-                    'cflags!': ['-O2'],
-                  }, {
-                     'cflags': ['-O2'],
-                     'cflags!': ['-O3'],
-                   }],
-                ],
               }],
               ['OS=="mac"', {
                 'xcode_settings': {
@@ -1326,24 +1317,17 @@
           ['OS=="linux" or OS=="freebsd" or OS=="openbsd" or OS=="netbsd" \
             or OS=="aix"', {
             'cflags!': [
-              '-Os',
+              '-O0',
+              '-O1',
+              '-O2',
+              '-O3',
             ],
             'cflags': [
+              '-Os',
               '-fdata-sections',
               '-ffunction-sections',
               '<(wno_array_bounds)',
             ],
-            'conditions': [
-              # Don't use -O3 with sanitizers.
-              ['asan==0 and msan==0 and lsan==0 \
-                and tsan==0 and ubsan==0 and ubsan_vptr==0', {
-                'cflags': ['-O3'],
-                'cflags!': ['-O2'],
-              }, {
-                'cflags': ['-O2'],
-                'cflags!': ['-O3'],
-              }],
-            ],
           }],
           ['OS=="android"', {
             'cflags!': [
diff -Nur node-v14.0.0-orig/node.gypi node-v14.0.0/node.gypi
--- node-v14.0.0-orig/node.gypi	2020-04-21 13:38:51.000000000 +0200
+++ node-v14.0.0/node.gypi	2020-04-24 16:23:28.030759453 +0200
@@ -307,11 +307,6 @@
     [ 'OS=="sunos"', {
       'ldflags': [ '-Wl,-M,/usr/lib/ld/map.noexstk' ],
     }],
-    [ 'OS=="linux"', {
-      'libraries!': [
-        '-lrt'
-      ],
-    }],
     [ 'OS in "freebsd linux"', {
       'ldflags': [ '-Wl,-z,relro',
                    '-Wl,-z,now' ]
diff -Nur node-v14.0.0-orig/deps/uv/src/unix/async.c node-v14.0.0/deps/uv/src/unix/async.c
--- node-v14.0.0-orig/deps/uv/src/unix/async.c	2020-04-21 13:38:50.000000000 +0200
+++ node-v14.0.0/deps/uv/src/unix/async.c	2020-04-24 16:23:28.034759424 +0200
@@ -33,10 +33,6 @@
 #include <string.h>
 #include <unistd.h>
 
-#ifdef __linux__
-#include <sys/eventfd.h>
-#endif
-
 static void uv__async_send(uv_loop_t* loop);
 static int uv__async_start(uv_loop_t* loop);
 
@@ -162,15 +158,6 @@
   len = 1;
   fd = loop->async_wfd;
 
-#if defined(__linux__)
-  if (fd == -1) {
-    static const uint64_t val = 1;
-    buf = &val;
-    len = sizeof(val);
-    fd = loop->async_io_watcher.fd;  /* eventfd */
-  }
-#endif
-
   do
     r = write(fd, buf, len);
   while (r == -1 && errno == EINTR);
@@ -193,18 +180,9 @@
   if (loop->async_io_watcher.fd != -1)
     return 0;
 
-#ifdef __linux__
-  err = eventfd(0, EFD_CLOEXEC | EFD_NONBLOCK);
-  if (err < 0)
-    return UV__ERR(errno);
-
-  pipefd[0] = err;
-  pipefd[1] = -1;
-#else
   err = uv__make_pipe(pipefd, UV__F_NONBLOCK);
   if (err < 0)
     return err;
-#endif
 
   uv__io_init(&loop->async_io_watcher, uv__async_io, pipefd[0]);
   uv__io_start(loop, &loop->async_io_watcher, POLLIN);
diff -Nur node-v14.0.0-orig/deps/uv/src/unix/core.c node-v14.0.0/deps/uv/src/unix/core.c
--- node-v14.0.0-orig/deps/uv/src/unix/core.c	2020-04-21 13:38:50.000000000 +0200
+++ node-v14.0.0/deps/uv/src/unix/core.c	2020-04-24 19:47:15.049994016 +0200
@@ -87,11 +87,6 @@
 #include <sys/ioctl.h>
 #endif
 
-#if defined(__linux__)
-# include <sys/syscall.h>
-# define uv__accept4 accept4
-#endif
-
 static int uv__run_pending(uv_loop_t* loop);
 
 /* Verify that uv_buf_t is ABI-compatible with struct iovec. */
@@ -527,8 +522,6 @@
   return close$NOCANCEL$UNIX2003(fd);
 #endif
 #pragma GCC diagnostic pop
-#elif defined(__linux__)
-  return syscall(SYS_close, fd);
 #else
   return close(fd);
 #endif
@@ -1017,7 +1010,7 @@
 
 
 int uv__dup2_cloexec(int oldfd, int newfd) {
-#if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__linux__)
+#if defined(__FreeBSD__) || defined(__NetBSD__)
   int r;
 
   r = dup3(oldfd, newfd, O_CLOEXEC);
diff -Nur node-v14.0.0-orig/deps/uv/src/unix/fs.c node-v14.0.0/deps/uv/src/unix/fs.c
--- node-v14.0.0-orig/deps/uv/src/unix/fs.c	2020-04-21 13:38:50.000000000 +0200
+++ node-v14.0.0/deps/uv/src/unix/fs.c	2020-04-24 16:27:37.728970417 +0200
@@ -220,8 +220,7 @@
 }
 
 static ssize_t uv__fs_futime(uv_fs_t* req) {
-#if defined(__linux__)                                                        \
-    || defined(_AIX71)                                                        \
+#if defined(_AIX71)                                                        \
     || defined(__HAIKU__)
   /* utimesat() has nanosecond resolution but we stick to microseconds
    * for the sake of consistency with other platforms.
@@ -234,7 +233,8 @@
 #else
   return futimens(req->file, ts);
 #endif
-#elif defined(__APPLE__)                                                      \
+#elif defined(__linux__)                                                      \
+    || defined(__APPLE__)                                                     \
     || defined(__DragonFly__)                                                 \
     || defined(__FreeBSD__)                                                   \
     || defined(__FreeBSD_kernel__)                                            \
@@ -974,8 +974,7 @@
 
 
 static ssize_t uv__fs_utime(uv_fs_t* req) {
-#if defined(__linux__)                                                         \
-    || defined(_AIX71)                                                         \
+#if defined(_AIX71)                                                            \
     || defined(__sun)                                                          \
     || defined(__HAIKU__)
   /* utimesat() has nanosecond resolution but we stick to microseconds
@@ -985,7 +984,8 @@
   ts[0] = uv__fs_to_timespec(req->atime);
   ts[1] = uv__fs_to_timespec(req->mtime);
   return utimensat(AT_FDCWD, req->path, ts, 0);
-#elif defined(__APPLE__)                                                      \
+#elif defined(__linux__)                                                      \
+    || defined(__APPLE__)                                                     \
     || defined(__DragonFly__)                                                 \
     || defined(__FreeBSD__)                                                   \
     || defined(__FreeBSD_kernel__)                                            \
@@ -1017,15 +1017,15 @@
 
 
 static ssize_t uv__fs_lutime(uv_fs_t* req) {
-#if defined(__linux__)            ||                                           \
-    defined(_AIX71)               ||                                           \
+#if defined(_AIX71)               ||                                           \
     defined(__sun)                ||                                           \
     defined(__HAIKU__)
   struct timespec ts[2];
   ts[0] = uv__fs_to_timespec(req->atime);
   ts[1] = uv__fs_to_timespec(req->mtime);
   return utimensat(AT_FDCWD, req->path, ts, AT_SYMLINK_NOFOLLOW);
-#elif defined(__APPLE__)          ||                                          \
+#elif defined(__linux__)          ||                                          \
+      defined(__APPLE__)          ||                                          \
       defined(__DragonFly__)      ||                                          \
       defined(__FreeBSD__)        ||                                          \
       defined(__FreeBSD_kernel__) ||                                          \
diff -Nur node-v14.0.0-orig/deps/uv/src/unix/linux-core.c node-v14.0.0/deps/uv/src/unix/linux-core.c
--- node-v14.0.0-orig/deps/uv/src/unix/linux-core.c	2020-04-21 13:38:50.000000000 +0200
+++ node-v14.0.0/deps/uv/src/unix/linux-core.c	2020-04-24 16:23:28.038759393 +0200
@@ -86,16 +86,8 @@
 int uv__platform_loop_init(uv_loop_t* loop) {
   int fd;
 
-  /* It was reported that EPOLL_CLOEXEC is not defined on Android API < 21,
-   * a.k.a. Lollipop. Since EPOLL_CLOEXEC is an alias for O_CLOEXEC on all
-   * architectures, we just use that instead.
-   */
-#if defined(__ANDROID_API__) && __ANDROID_API__ < 21
   fd = -1;
   errno = ENOSYS;
-#else
-  fd = epoll_create1(O_CLOEXEC);
-#endif
 
   /* epoll_create1() can fail either because it's not implemented (old kernel)
    * or because it doesn't understand the O_CLOEXEC flag.
@@ -293,16 +285,8 @@
         abort();
 
     if (no_epoll_wait != 0 || (sigmask != 0 && no_epoll_pwait == 0)) {
-#if defined(__ANDROID_API__) && __ANDROID_API__ < 21
       nfds = -1;
       errno = ENOSYS;
-#else
-      nfds = epoll_pwait(loop->backend_fd,
-                         events,
-                         ARRAY_SIZE(events),
-                         timeout,
-                         &sigset);
-#endif
       if (nfds == -1 && errno == ENOSYS)
         no_epoll_pwait = 1;
     } else {
diff -Nur node-v14.0.0-orig/deps/uv/src/unix/linux-inotify.c node-v14.0.0/deps/uv/src/unix/linux-inotify.c
--- node-v14.0.0-orig/deps/uv/src/unix/linux-inotify.c	2020-04-21 13:38:50.000000000 +0200
+++ node-v14.0.0/deps/uv/src/unix/linux-inotify.c	2020-04-24 16:23:28.038759393 +0200
@@ -71,9 +71,12 @@
   if (loop->inotify_fd != -1)
     return 0;
 
-  fd = inotify_init1(IN_NONBLOCK | IN_CLOEXEC);
+  fd = inotify_init();
   if (fd < 0)
     return UV__ERR(errno);
+  
+  uv__cloexec(fd, 1);
+  uv__nonblock_fcntl(fd, 1);
 
   loop->inotify_fd = fd;
   uv__io_init(&loop->inotify_read_watcher, uv__inotify_read, loop->inotify_fd);
diff -Nur node-v14.0.0-orig/deps/uv/src/unix/process.c node-v14.0.0/deps/uv/src/unix/process.c
--- node-v14.0.0-orig/deps/uv/src/unix/process.c	2020-04-21 13:38:50.000000000 +0200
+++ node-v14.0.0/deps/uv/src/unix/process.c	2020-04-24 16:23:28.038759393 +0200
@@ -113,7 +113,7 @@
 
 
 static int uv__make_socketpair(int fds[2]) {
-#if defined(__FreeBSD__) || defined(__linux__)
+#if defined(__FreeBSD__)
   if (socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, fds))
     return UV__ERR(errno);
 
@@ -140,7 +140,7 @@
 
 
 int uv__make_pipe(int fds[2], int flags) {
-#if defined(__FreeBSD__) || defined(__linux__)
+#if defined(__FreeBSD__)
   if (pipe2(fds, flags | O_CLOEXEC))
     return UV__ERR(errno);
 
