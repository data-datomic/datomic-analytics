
struct _PROC_PERF_DOMAIN {
	struct _LIST_ENTRY	Link;
	struct _KPRCB	*Master;
	struct _KAFFINITY_EX	Members;
	uint32_t	ProcessorCount;
	uint8_t	EfficiencyClass;
	uint8_t	NominalPerformanceClass;
	uint8_t	HighestPerformanceClass;
	uint8_t	Spare;
	struct _PROC_PERF_CONSTRAINT	*Processors;
	void	*GetFFHThrottleState;
	void	*TimeWindowHandler;
	void	*BoostPolicyHandler;
	void	*BoostModeHandler;
	void	*EnergyPerfPreferenceHandler;
	void	*AutonomousActivityWindowHandler;
	void	*AutonomousModeHandler;
	void	*ReinitializeHandler;
	struct longstruct unsigned	*PerfSelectionHandler;
	void	*PerfControlHandler;
	uint32_t	MaxFrequency;
	uint32_t	NominalFrequency;
	uint32_t	MaxPercent;
	uint32_t	MinPerfPercent;
	uint32_t	MinThrottlePercent;
	uint8_t	__padding0__;
	uint8_t	__padding1__;
	uint8_t	__padding2__;
	uint8_t	__padding3__;
	uint64_t	MinimumRelativePerformance;
	uint64_t	NominalRelativePerformance;
	uint8_t	Coordination;
	uint8_t	HardPlatformCap;
	uint8_t	AffinitizeControl;
	uint8_t	EfficientThrottle;
	uint8_t	AutonomousMode;
	uint8_t	__padding0__;
	uint8_t	__padding1__;
	uint8_t	__padding2__;
	uint32_t	SelectedPercent;
	uint32_t	SelectedFrequency;
	uint32_t	DesiredPercent;
	uint32_t	MaxPolicyPercent;
	uint32_t	MinPolicyPercent;
	uint32_t	ConstrainedMaxPercent;
	uint32_t	ConstrainedMinPercent;
	uint32_t	GuaranteedPercent;
	uint32_t	TolerancePercent;
	uint8_t	__padding0__;
	uint8_t	__padding1__;
	uint8_t	__padding2__;
	uint8_t	__padding3__;
	uint64_t	SelectedState;
	uint64_t	PerfChangeTime;
	uint32_t	PerfChangeIntervalCount;
	uint8_t	Force;
	uint8_t	ProvideGuidance;
}__attribute__((packed));
