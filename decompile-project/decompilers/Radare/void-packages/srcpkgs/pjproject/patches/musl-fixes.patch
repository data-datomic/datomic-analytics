--- pjsip-apps/src/samples/siprtp.c
+++ pjsip-apps/src/samples/siprtp.c
@@ -1133,7 +1133,7 @@
 		    PJ_RETURN_OS_ERROR(rc));
 	return;
     }
-    tp.__sched_priority = max_prio;
+    tp.sched_priority = max_prio;
 
     rc = sched_setscheduler(0, POLICY, &tp);
     if (rc != 0) {
@@ -1142,7 +1142,7 @@
     }
 
     PJ_LOG(4, (THIS_FILE, "New process policy=%d, priority=%d",
-	      policy, tp.__sched_priority));
+	      policy, tp.sched_priority));
 
     /*
      * Adjust thread scheduling algorithm and priority
@@ -1155,10 +1155,10 @@
     }
 
     PJ_LOG(4, (THIS_FILE, "Old thread policy=%d, priority=%d",
-	      policy, tp.__sched_priority));
+	      policy, tp.sched_priority));
 
     policy = POLICY;
-    tp.__sched_priority = max_prio;
+    tp.sched_priority = max_prio;
 
     rc = pthread_setschedparam(pthread_self(), policy, &tp);
     if (rc != 0) {
@@ -1168,7 +1168,7 @@
     }
 
     PJ_LOG(4, (THIS_FILE, "New thread policy=%d, priority=%d",
-	      policy, tp.__sched_priority));
+	      policy, tp.sched_priority));
 }
 
 #else
--- ./pjlib/src/pj/os_core_unix.c
+++ pjlib/src/pj/os_core_unix.c
@@ -1104,7 +1104,7 @@
     if (type == PJ_MUTEX_SIMPLE) {
 #if (defined(PJ_LINUX) && PJ_LINUX!=0) || \
     defined(PJ_HAS_PTHREAD_MUTEXATTR_SETTYPE)
-	rc = pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_FAST_NP);
+	rc = pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_NORMAL);
 #elif (defined(PJ_RTEMS) && PJ_RTEMS!=0) || \
        defined(PJ_PTHREAD_MUTEXATTR_T_HAS_RECURSIVE)
 	/* Nothing to do, default is simple */
@@ -1114,7 +1114,7 @@
     } else {
 #if (defined(PJ_LINUX) && PJ_LINUX!=0) || \
      defined(PJ_HAS_PTHREAD_MUTEXATTR_SETTYPE)
-	rc = pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE_NP);
+	rc = pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
 #elif (defined(PJ_RTEMS) && PJ_RTEMS!=0) || \
        defined(PJ_PTHREAD_MUTEXATTR_T_HAS_RECURSIVE)
 	// Phil Torre <ptorre@zetron.com>:
